/*
Naming Conventions

_Reprinted from
https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md._

SUIT CSS relies on _structured class names_ and _meaningful hyphens_ (i.e., not
using hyphens merely to separate words). This helps to work around the current
limits of applying CSS to the DOM (i.e., the lack of style encapsulation), and
to better communicate the relationships between classes.

The primary architectural division is between
[utilities](./section-utilities.html) and
[components](./section-components.html).

#### Table of contents

* [u-utilityName](#u-utilityname)
* [ComponentName](#componentname)
* [ComponentName--modifierName](#componentname--modifiername)
* [ComponentName-descendentName](#componentname-descendentname)
* [ComponentName.is-stateOfComponent](#componentname-is-stateofcomponent)

### Utilities

Low-level structural and positional traits. Utilities can be applied directly to
any element within a component.

Syntax: `u-[sm-|md-|lg-]<utilityName>`

#### u-utilityName

Utilities must use a camel case name. What follows is an example of how various
utilities can be used to create a simple structure within a component.

```html
<div class="u-cf">
  <a class="u-floatLeft" href="{{url}}">
    <img class="u-block" src="{{src}}" alt="">
  </a>
  <p class="u-sizeFill u-textBreak">
    ...
  </p>
</div>
```

#### Responsive utilities

Certain utilities have responsive variants using the patterns: `u-sm-<name>`,
`u-md-<name>`, and `u-lg-<name>` for small, medium, and large Media Query
breakpoints.

### Components

The CSS responsible for component-specific styling.

Syntax: `[<namespace>-]<ComponentName>[-descendentName][--modifierName]`

This has several benefits when reading and writing HTML and CSS:

* It helps to distinguish between the classes for the root of the component,
  descendent elements, and modifications.
* It keeps the specificity of selectors low.
* It helps to decouple presentation semantics from document semantics.

#### namespace (optional)

If necessary, components can be prefixed with a namespace. For example, you may
wish to avoid the potential for collisions between libraries and your custom
components by prefixing all your components with a namespace.

```css
.twt-Button { /* ... */ }
.twt-Tabs { /* ... */ }
```

This makes it clear, when reading the HTML, which components are part of your
library.

#### ComponentName

The component's name must be written in pascal case. Nothing else in the HTML/CSS uses pascal case.

```css
.MyComponent { /* ... */ }
```

```html
<article class="MyComponent">
  ...
</article>
```

#### ComponentName--modifierName

A component modifier is a class that modifies the presentation of the base
component in some form (e.g., for a certain configuration of the component).
Modifier names must be written in camel case and be separated from the component
name by two hyphens. The class should be included in the HTML in addition to the
base component class.

```css
/* Core button */
.Button { /* ... */ }
/* Default button style */
.Button--default { /* ... */ }
```

```html
<button class="Button Button--default" type="button">...</button>
```

#### ComponentName-descendentName

A component descendent is a class that is attached to a descendent node of a
component. It's responsible for applying presentation directly to the descendent
on behalf of a particular component. Descendent names must be written in camel
case.

```html
<article class="Tweet">
  <header class="Tweet-header">
    <img class="Tweet-avatar" src="{{src}}" alt="{{alt}}">
    ...
  </header>
  <div class="Tweet-bodyText">
    ...
  </div>
</article>
````

#### ComponentName.is-stateOfComponent

Use `is-stateName` to reflect changes to a component's state. The state name must
be camel case. **Never style these classes directly; they should always be used as
an adjoining class.**

This means that the same state names can be used in multiple contexts, but every
component must define its own styles for the state (as they are scoped to the
component).

```css
.Tweet { /* ... */ }
.Tweet.is-expanded { /* ... */ }
```

```html
<article class="Tweet is-expanded">
  ...
</article>
```

Weight: +2

Style guide: Code.Naming Conventions

*/
