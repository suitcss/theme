/*
Utilities

Utility classes map to fixed, low-level, structural and positional traits.
These classes can be used in a component's HTML. Because utilities are so
focused, they will generally use `!important` to ensure their styles are always
applied.

(Read about SUIT CSS's [naming conventions](section-code.html#code-naming-conventions).)

### Why to use utilities

Certain CSS properties and patterns are used frequently. For example: floats,
containing floats, vertical alignment, text truncation. Relying on utilities
can help to reduce repetition and provide consistent implementations.

```html
<div class="u-cf">
  <p class="u-textTruncate">{{text}}</p>
  <img class="u-floatLeft" src="{{src}}" alt="">
  <img class="u-floatLeft" src="{{src}}" alt="">
  <img class="u-floatLeft" src="{{src}}" alt="">
</div>
```

Some utilities apply only a single declaration, so why not use inline styles?
Even here, small utilities are preferred because their values can be
preprocessed (e.g., generating RTL style sheets) or adjusted to viewport
dimensions. The scope of styles not contained in components can be tightly
defined, and code is a little easier to read.

### How to use utilities

Utilities can be added to any element; multiple utilities can be used together;
and utilities can be used alongside component classes.

```html
<div class="Tweet u-cf">
  <a class="u-sizeFit" href="{{url}}">
    <img class="u-block" src="{{src}}" alt="">
  </a>
  <p class="Tweet-text u-sizeFill u-textBreak">
    ...
  </p>
</div>
```

Utilities are grouped by type. The names of utilities with similar concerns
usually start with a common string, e.g., `u-textCenter`, `u-textTruncate`;
`u-linkClean`, `u-linkBlock`.

Any classes with terse names, e.g., `u-cf` and `u-nbfc`, are either
particularly abstract or very commonly used utilities with otherwise
excessively long names. For example, the `u-cf` utility is used to "contain
floats" without clipping any overflow; the `u-nbfc` utility is used to create a
"new block formatting context".

Make sure to read the documentation within the CSS files of utilities. It will
contain information about utility classes and their implementations.

### Modifiying utilities

Utilities should not be edited while in use, unless it is to fix a bug.
Modifications to utilities cascade throughout the application and should be
made with extreme care.

## Usage

Utilities are low-level. They have a very narrow scope and may end up being
used frequently, due to their separation from the semantics of the document and
the theming of a component. As a result, once a class is in significant use
great care should be taken when introducing any modifications to it.

Utilities make use of `!important` to ensure that their styles always apply
ahead of those defined in a component's dedicated CSS.

### Templating

Each utility class modifies a single trait (a small collection of similar
styles).

To apply a trait, or a combination of traits to an element, add the
corresponding class directly to the HTML.

Together, they can form a wide variety of UI patterns from simple principles.
Although you won't _always_ want to use combinations of utilities to generate
more complicated patterns, the option is there. Refactoring a component's HTML
to move particular utility traits into the component's own styles is a
relatively simple task.

The following contrived example would be a structural template for a simple
Tweet-like component. You would then create a new CSS file for the component to
contain any additional, specific styles (often a "skin" or "theme") needed to
fully realise the component.

```html
<article class="Tweet">
  <a class="u-floatRight" href="{{permalinkUrl}}">
    {{time}}
  </a>
  <a class="u-floatLeft" href="{{userUrl}}">
    <img src="{{userAvatar}}" alt="{{username}}'s avatar">
  </a>
  <div class="u-sizeFill">
    <a class="u-linkComplex" href="{{userUrl}}">
      <span class="u-linkComplexTarget">{{fullname}}</span>
      <span>@{{username}}</span>
    </a>

    <p class="u-textBreak">{{text}}</p>

    <div>
      <a class="u-linkComplex" href="#" role="button">
        <span class="Icon Icon--reply"></span>
        <span class="u-linkComplexTarget">Reply</span>
      </a>
      <a href="#" role="button">
        <span class="Icon Icon--favorite"></span>
        <span class="u-hiddenVisually">Favorite</span>
      </a>
      ...
    </div>
  </div>
</article>
```

Weight: +2

Style guide: Utilities
*/
